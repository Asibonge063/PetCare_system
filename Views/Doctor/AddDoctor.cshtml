@model PetCare_system.Models.Doctor

@{
    ViewBag.Title = "Add Doctor";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<!-- Custom CSS for this page -->
<style>
    :root {
        --primary-color: #4e73df;
        --secondary-color: #f8f9fc;
        --accent-color: #2e59d9;
        --text-dark: #5a5c69;
        --text-light: #858796;
        --success-color: #1cc88a;
        --border-radius: 0.35rem;
    }

    .card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.2);
        }

    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        padding: 1.25rem 1.5rem;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
    }

    .card-title {
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    .breadcrumb {
        background-color: var(--secondary-color);
        border-radius: var(--border-radius);
        padding: 0.75rem 1rem;
    }

    .breadcrumb-item a {
        color: var(--primary-color);
        text-decoration: none;
        transition: color 0.2s;
    }

        .breadcrumb-item a:hover {
            color: var(--accent-color);
        }

    .form-label {
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
    }

    .form-control, .input-group-text {
        border-radius: var(--border-radius);
    }

    .input-group-text {
        background-color: var(--secondary-color);
        border-right: none;
    }

    .form-control {
        border-left: none;
        padding-left: 0;
    }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.25);
            border-color: var(--primary-color);
        }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        padding: 0.5rem 1.5rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
            transform: translateY(-1px);
        }

    .btn-outline-secondary {
        transition: all 0.3s;
    }

        .btn-outline-secondary:hover {
            transform: translateY(-1px);
        }

    .invalid-feedback {
        font-size: 0.85rem;
    }

    .form-text {
        font-size: 0.8rem;
        color: var(--text-light);
    }

    .alert-success {
        background-color: rgba(28, 200, 138, 0.1);
        border-color: rgba(28, 200, 138, 0.2);
        color: var(--success-color);
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card-header {
            padding: 1rem;
        }

        .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }

        .d-md-flex {
            flex-direction: column;
        }
    }
</style>

<div class="container-fluid">
    <!-- Breadcrumb navigation -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Dashboard", "Home")"><i class="fas fa-home"></i> Dashboard</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("DoctorList", "Doctor")">Doctors</a></li>
            <li class="breadcrumb-item active" aria-current="page">Add Doctor</li>
        </ol>
    </nav>

    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-user-md me-2"></i>Add New Doctor
                    </h3>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("AddDoctor", "Doctor", FormMethod.Post, new { role = "form", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()

                        if (TempData["Success"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show">
                                @TempData["Success"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", required = "required", placeholder = "Dr. John Smith" })
                                    <div class="invalid-feedback">
                                        Please provide a full name.
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Specialization <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-stethoscope"></i></span>
                                    @Html.TextBoxFor(m => m.Specialization, new { @class = "form-control", required = "required", placeholder = "Veterinary Cardiology" })
                                    <div class="invalid-feedback">
                                        Please provide a specialization.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Email <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", required = "required", placeholder = "doctor@example.com" })
                                    <div class="invalid-feedback">
                                        Please provide a valid email.
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                    @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", required = "required", placeholder = "(123) 456-7890" })
                                    <div class="invalid-feedback">
                                        Please provide a phone number.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", placeholder = "Create a strong password", id = "password" })
                                <button class="btn btn-outline-secondary" type="button" id="togglePassword">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <div class="invalid-feedback">
                                    Please provide a password.
                                </div>
                            </div>
                            <div class="form-text">Password must be at least 8 characters long and include uppercase, lowercase, numbers, and special characters</div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                            <a href="@Url.Action("Dashboard", "Home")" class="btn btn-outline-secondary me-md-2">
                                <i class="fas fa-arrow-left me-1"></i> Back to List
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Add Doctor
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

    <script>
        // Password visibility toggle
        document.getElementById('togglePassword').addEventListener('click', function() {
            const password = document.getElementById('password');
            const icon = this.querySelector('i');
            if (password.type === 'password') {
                password.type = 'text';
                icon.classList.replace('fa-eye', 'fa-eye-slash');
            } else {
                password.type = 'password';
                icon.classList.replace('fa-eye-slash', 'fa-eye');
            }
        });

        // Enhanced form validation with password strength check
        (function () {
            'use strict'

            // Fetch all forms with validation
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        // Additional password validation
                        const password = document.getElementById('password');
                        if (password.value.length < 8) {
                            password.setCustomValidity("Password must be at least 8 characters");
                            password.classList.add('is-invalid');
                            event.preventDefault();
                            event.stopPropagation();
                        } else {
                            password.setCustomValidity("");
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        // Real-time password strength indicator
        document.getElementById('password').addEventListener('input', function() {
            const password = this.value;
            const strengthText = document.createElement('small');
            strengthText.className = 'form-text text-end';

            let strength = 0;
            if (password.length >= 8) strength++;
            if (password.match(/[a-z]/)) strength++;
            if (password.match(/[A-Z]/)) strength++;
            if (password.match(/[0-9]/)) strength++;
            if (password.match(/[^a-zA-Z0-9]/)) strength++;

            const strengthElement = document.querySelector('.form-text');
            const colors = ['text-danger', 'text-warning', 'text-info', 'text-primary', 'text-success'];

            strengthElement.className = `form-text ${colors[strength - 1]}`;

            const messages = [
                'Very Weak',
                'Weak',
                'Moderate',
                'Strong',
                'Very Strong'
            ];

            strengthElement.textContent = `Password Strength: ${messages[strength - 1]} (${password.length} characters)`;
        });
    </script>
}